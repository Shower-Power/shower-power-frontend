{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ellen\\\\Code\\\\shower-power\\\\src\\\\App.js\";\nimport React from 'react';\nimport Button from './Button';\nimport Data from './Data';\nimport './App.css';\n\nconst axios = require('axios');\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.toggleShower = () => {\n      this.state.showerIsOn ? this.endShower() : this.startShower();\n      const showerIsOn = !this.state.showerIsOn;\n      this.setState({\n        showerIsOn\n      });\n    };\n\n    this.endShower = () => {\n      const duration = Date.now() - this.state.showerStartedAt;\n      this.calculateDuration();\n      const _this$state = this.state,\n            initialTemperature = _this$state.initialTemperature,\n            initialHumidity = _this$state.initialHumidity,\n            peakHumidity = _this$state.peakHumidity,\n            peakTemperature = _this$state.peakTemperature;\n      const currentShower = {\n        duration,\n        tempBefore: initialTemperature,\n        humidityBefore: initialHumidity,\n        tempPeak: peakTemperature,\n        humidityPeak: peakHumidity\n      };\n      this.getAllShowerData(currentShower);\n      axios.patch(\"https://shower-power.herokuapp.com/api/v1/showers/\".concat(this.state.currentShowerId), {\n        duration,\n        tempBefore: initialTemperature,\n        humidityBefore: initialHumidity,\n        tempPeak: peakTemperature,\n        humidityPeak: peakHumidity\n      });\n      clearInterval(this.state.timer);\n    };\n\n    this.getAllShowerData = currentShower => {\n      axios.get('https://shower-power.herokuapp.com/api/v1/showers/').then(res => {\n        const data = res.data.concat(currentShower);\n        this.calculateAverages(data);\n      });\n    };\n\n    this.calculateAverages = data => {\n      const length = this.calcAvg(this.getValues(data, \"duration\"));\n      const maxT = this.calcAvg(this.getValues(data, \"tempPeak\"));\n      const maxH = this.calcAvg(this.getValues(data, \"humidityPeak\"));\n      const incT = this.calcAvg(this.getCalculatedValues(data, \"humidityPeak\", \"humidityBefore\"));\n      const incH = this.calcAvg(this.getCalculatedValues(data, \"tempPeak\", \"tempBefore\"));\n      const avgs = {\n        length,\n        maxT,\n        maxH,\n        incT,\n        incH\n      };\n      this.setState({\n        avgs\n      });\n    };\n\n    this.getValues = (data, dataType) => {\n      const values = [];\n      data.forEach(shower => {\n        if (shower[dataType]) values.push(shower[dataType]);\n      });\n      return values;\n    };\n\n    this.getCalculatedValues = (data, dataType1, dataType2) => {\n      const values = [];\n      data.forEach(shower => {\n        if (shower[dataType1] && shower[dataType2]) values.push(shower[dataType1] - shower[dataType2]);\n      });\n      return values;\n    };\n\n    this.calcAvg = data => {\n      const total = data.reduce((acc, cur) => acc + cur);\n      return (total / data.length).toFixed(2);\n    };\n\n    this.calculateDuration = () => {\n      let duration = Date.now() - this.state.showerStartedAt;\n      this.setState({\n        duration,\n        durationMessage: this.prettyDuration(duration)\n      });\n    };\n\n    this.prettyDuration = duration => {\n      let durationMessage;\n      const hoursDifference = Math.floor(duration / 1000 / 60 / 60);\n      duration -= hoursDifference * 1000 * 60 * 60;\n      const minutesDifference = Math.floor(duration / 1000 / 60);\n      duration -= minutesDifference * 1000 * 60;\n      const secondsDifference = Math.floor(duration / 1000);\n      durationMessage = \"\".concat(minutesDifference, \"m \").concat(secondsDifference, \"s\");\n      return durationMessage;\n    };\n\n    this.getInitialData = () => {\n      this.getCurrentData();\n      window.setTimeout(() => {\n        this.setState({\n          initialHumidity: this.state.currentHumidity,\n          initialTemperature: this.state.currentTemperature\n        });\n      }, 1000);\n      this.setState({\n        timer: setInterval(() => this.checkCurrentData(), 3000)\n      });\n    };\n\n    this.checkCurrentData = () => {\n      this.getCurrentData();\n      window.setTimeout(() => {\n        if (this.state.currentTemperature > this.state.peakTemperature) this.setState({\n          peakTemperature: this.state.currentTemperature\n        });\n        if (this.state.currentHumidity > this.state.peakHumidity) this.setState({\n          peakHumidity: this.state.currentHumidity\n        });\n      }, 1000);\n    };\n\n    this.getCurrentData = () => {\n      axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/fantasticfarenheit').then(currentTemperatureReading => this.setState({\n        currentTemperature: currentTemperatureReading.data.last_value\n      }));\n      axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/huzzahhumidity').then(currentHumidityReading => this.setState({\n        currentHumidity: currentHumidityReading.data.last_value\n      }));\n    };\n\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      currentTemperature: null,\n      currentHumidity: null,\n      initialTemperature: null,\n      initialHumidity: null,\n      peakTemperature: 0,\n      peakHumidity: 0,\n      showerStartedAt: null,\n      durationMessage: '',\n      duration: null,\n      timer: null,\n      avgs: {\n        length: null,\n        maxT: null,\n        maxH: null,\n        incH: null,\n        incT: null\n      }\n    };\n  }\n\n  startShower() {\n    this.setState({\n      showerStartedAt: Date.now()\n    });\n    axios.post('https://shower-power.herokuapp.com/api/v1/showers', {}).then(res => {\n      this.setState({\n        currentShowerId: res.data._id\n      });\n    }).catch(err => console.log(err));\n    this.getInitialData();\n  }\n\n  render() {\n    const data = {\n      length: this.state.durationMessage,\n      averageLength: this.prettyDuration(this.state.avgs.length),\n      diffFromAverage: this.prettyDuration(Math.abs(this.state.avgs.length - this.state.duration)),\n      startH: this.state.initialHumidity,\n      startT: this.state.initialTemperature,\n      peakH: this.state.peakHumidity,\n      peakT: this.state.peakTemperature,\n      avgPeakH: this.state.avgs.maxT,\n      avgPeakT: this.state.avgs.maxH,\n      diffH: this.state.peakHumidity - this.state.initialHumidity,\n      diffT: this.state.peakTemperature - this.startShower.initialTemperature,\n      avgDiffH: this.state.avgs.incH,\n      avgDiffT: this.state.avgs.incT\n    };\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"SHWR PWR!\"), React.createElement(\"div\", {\n      className: \"app-headline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"keep it short!\"), React.createElement(Button, {\n      type: !this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off',\n      onClick: this.toggleShower,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), !this.state.showerIsOn && this.state.duration ? React.createElement(Data, {\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Ellen\\Code\\shower-power\\src\\App.js"],"names":["React","Button","Data","axios","require","App","Component","constructor","toggleShower","state","showerIsOn","endShower","startShower","setState","duration","Date","now","showerStartedAt","calculateDuration","initialTemperature","initialHumidity","peakHumidity","peakTemperature","currentShower","tempBefore","humidityBefore","tempPeak","humidityPeak","getAllShowerData","patch","currentShowerId","clearInterval","timer","get","then","res","data","concat","calculateAverages","length","calcAvg","getValues","maxT","maxH","incT","getCalculatedValues","incH","avgs","dataType","values","forEach","shower","push","dataType1","dataType2","total","reduce","acc","cur","toFixed","durationMessage","prettyDuration","hoursDifference","Math","floor","minutesDifference","secondsDifference","getInitialData","getCurrentData","window","setTimeout","currentHumidity","currentTemperature","setInterval","checkCurrentData","currentTemperatureReading","last_value","currentHumidityReading","post","_id","catch","err","console","log","render","averageLength","diffFromAverage","abs","startH","startT","peakH","peakT","avgPeakH","avgPeakT","diffH","diffT","avgDiffH","avgDiffT"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Button from './Button';\nimport Data from './Data';\nimport './App.css';\n\nconst axios = require('axios');\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      currentTemperature: null,\n      currentHumidity: null,\n      initialTemperature: null,\n      initialHumidity: null,\n      peakTemperature: 0,\n      peakHumidity: 0,\n      showerStartedAt: null,\n      durationMessage: '',\n      duration: null,\n      timer: null,\n      avgs: {\n        length: null,\n        maxT: null,\n        maxH: null,\n        incH: null,\n        incT: null\n      }\n    }\n  }\n\n  toggleShower = () => {\n    this.state.showerIsOn ? this.endShower() : this.startShower();\n    const showerIsOn = !this.state.showerIsOn\n    this.setState({showerIsOn});\n  }\n\n  startShower (){\n    this.setState({showerStartedAt: Date.now()})\n    axios.post('https://shower-power.herokuapp.com/api/v1/showers', {})\n      .then(res => {\n        this.setState({currentShowerId: res.data._id})\n      }).catch(err => console.log(err))\n    this.getInitialData();\n  }\n\n  endShower = () => {\n    const duration = Date.now() - this.state.showerStartedAt;\n    this.calculateDuration()\n    const {initialTemperature, initialHumidity, peakHumidity, peakTemperature} = this.state;\n    const currentShower = {\n      duration,\n      tempBefore: initialTemperature,\n      humidityBefore: initialHumidity,\n      tempPeak: peakTemperature,\n      humidityPeak: peakHumidity\n    }\n    this.getAllShowerData(currentShower);\n    axios.patch(`https://shower-power.herokuapp.com/api/v1/showers/${this.state.currentShowerId}`, {      duration,\n    tempBefore: initialTemperature,\n    humidityBefore: initialHumidity,\n    tempPeak: peakTemperature,\n    humidityPeak: peakHumidity})\n    clearInterval(this.state.timer)\n  }\n\n  getAllShowerData = (currentShower) => {\n    axios.get('https://shower-power.herokuapp.com/api/v1/showers/').then(res => {\n      const data = res.data.concat(currentShower)\n      this.calculateAverages(data)\n    })\n  }\n\n  calculateAverages = (data) => {\n    const length = this.calcAvg(this.getValues(data, \"duration\"));\n    const maxT = this.calcAvg(this.getValues(data, \"tempPeak\"));\n    const maxH = this.calcAvg(this.getValues(data, \"humidityPeak\"));\n    const incT = this.calcAvg(this.getCalculatedValues(data, \"humidityPeak\", \"humidityBefore\"));\n    const incH = this.calcAvg(this.getCalculatedValues(data, \"tempPeak\", \"tempBefore\"));\n\n    const avgs = {\n      length,\n      maxT,\n      maxH,\n      incT,\n      incH\n    }\n    this.setState({avgs})\n  }\n\n  getValues = (data, dataType) => {\n    const values = [];\n    data.forEach(shower => {if (shower[dataType]) values.push(shower[dataType])})\n    return values;\n  }\n\n  getCalculatedValues = (data, dataType1, dataType2) => {\n    const values = [];\n    data.forEach(shower => {if (shower[dataType1] && shower[dataType2]) values.push(shower[dataType1] - shower[dataType2])})\n    return values;\n  }\n\n  calcAvg = (data) => {\n    const total = data.reduce((acc, cur) => acc + cur);\n    return (total/data.length).toFixed(2)\n  }\n\n  calculateDuration = () => {\n      let duration = Date.now() - this.state.showerStartedAt;\n      this.setState({duration, durationMessage: this.prettyDuration(duration)})\n  }\n\n  prettyDuration = (duration) => {\n    let durationMessage;\n    const hoursDifference = Math.floor(duration/1000/60/60);\n    duration -= hoursDifference*1000*60*60\n    const minutesDifference = Math.floor(duration/1000/60);\n    duration -= minutesDifference*1000*60\n    const secondsDifference = Math.floor(duration/1000);\n    durationMessage = `${minutesDifference}m ${secondsDifference}s`\n    return durationMessage;\n  }\n\n  getInitialData = () => {\n    this.getCurrentData();\n    window.setTimeout(() => {\n      this.setState({initialHumidity: this.state.currentHumidity, initialTemperature: this.state.currentTemperature})\n  }, 1000);\n    this.setState({timer: setInterval(() => this.checkCurrentData(), 3000)})\n  }\n\n  checkCurrentData = () => {\n    this.getCurrentData();\n    window.setTimeout(() => {\n      if (this.state.currentTemperature > this.state.peakTemperature) this.setState({peakTemperature: this.state.currentTemperature})\n      if (this.state.currentHumidity > this.state.peakHumidity) this.setState({peakHumidity: this.state.currentHumidity})\n      }, 1000);\n  }\n\n  getCurrentData = () => {\n    axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/fantasticfarenheit')\n      .then(currentTemperatureReading => this.setState({ currentTemperature: currentTemperatureReading.data.last_value }))\n    axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/huzzahhumidity')\n      .then(currentHumidityReading => this.setState({currentHumidity: currentHumidityReading.data.last_value}))\n  }\n\n  render() {\n    const data = {\n      length: this.state.durationMessage,\n      averageLength: this.prettyDuration(this.state.avgs.length),\n      diffFromAverage: this.prettyDuration(Math.abs(this.state.avgs.length - this.state.duration)),\n      startH: this.state.initialHumidity,\n      startT: this.state.initialTemperature,\n      peakH: this.state.peakHumidity,\n      peakT: this.state.peakTemperature,\n      avgPeakH: this.state.avgs.maxT,\n      avgPeakT: this.state.avgs.maxH,\n      diffH: this.state.peakHumidity - this.state.initialHumidity,\n      diffT: this.state.peakTemperature - this.startShower.initialTemperature,\n      avgDiffH: this.state.avgs.incH,\n      avgDiffT: this.state.avgs.incT\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"app-title\">SHWR PWR!</div>\n        <div className=\"app-headline\">keep it short!</div>\n        <Button type={!this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off' } onClick={this.toggleShower}/>\n        {!this.state.showerIsOn && this.state.duration ? <Data data={data}/> : null}\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}