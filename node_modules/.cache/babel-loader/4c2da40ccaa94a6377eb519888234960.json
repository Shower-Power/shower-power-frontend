{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ellen\\\\Code\\\\shower-power\\\\src\\\\App.js\";\nimport React from 'react';\nimport Button from './Button';\nimport Data from './Data';\nimport './App.css';\n\nconst axios = require('axios');\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.toggleShower = () => {\n      console.log(this.state.showerIsOn);\n      this.state.showerIsOn ? this.endShower() : this.startShower();\n      const showerIsOn = !this.state.showerIsOn;\n      this.setState({\n        showerIsOn\n      });\n    };\n\n    this.endShower = () => {\n      const duration = Date.now() - this.state.showerStartedAt;\n      this.calculateDuration();\n      const _this$state = this.state,\n            initialTemperature = _this$state.initialTemperature,\n            initialHumidity = _this$state.initialHumidity,\n            peakHumidity = _this$state.peakHumidity,\n            peakTemperature = _this$state.peakTemperature;\n      axios.patch(\"https://shower-power.herokuapp.com/api/v1/showers/\".concat(this.state.currentShowerId), {\n        duration,\n        tempBefore: initialTemperature,\n        humidityBefore: initialHumidity,\n        tempPeak: peakTemperature,\n        humidityPeak: peakHumidity\n      });\n      clearInterval(this.state.timer);\n      this.getAllShowerData();\n    };\n\n    this.getAllShowerData = () => {\n      axios.get('https://shower-power.herokuapp.com/api/v1/showers/').then(res => {\n        this.calculateAverages(res.data);\n      });\n    };\n\n    this.calculateAverages = data => {\n      const totalLength = data.reduce((acc, cur) => acc + cur.duration);\n      const totalMaxTemp = data.reduce((acc, cur) => acc + cur.peakTemperature);\n      const totalMaxHumidity = data.reduce((acc, cur) => acc + cur.peakHumidity);\n      const totalIncHumidity = data.reduce((acc, cur) => acc + (cur.peakHumidity - cur.initialHumidity));\n      const totalIncTemp = data.reduce((acc, cur) => acc + (cur.peakTemperature - cur.initialTemperature));\n      const averages = {\n        length: totalLength / data.length,\n        maxT: totalMaxTemp / data.length,\n        maxH: totalMaxHumidity / data.length,\n        incT: totalIncTemp / data.length,\n        incH: totalIncHumidity / data.length\n      };\n      this.setState({\n        averages\n      });\n    };\n\n    this.calculateDuration = () => {\n      let duration = Date.now() - this.state.showerStartedAt;\n      this.setState({\n        duration\n      });\n      let durationMessage;\n      const hoursDifference = Math.floor(duration / 1000 / 60 / 60);\n      duration -= hoursDifference * 1000 * 60 * 60;\n      const minutesDifference = Math.floor(duration / 1000 / 60);\n      duration -= minutesDifference * 1000 * 60;\n      const secondsDifference = Math.floor(duration / 1000);\n      durationMessage = \"\".concat(minutesDifference, \"m \").concat(secondsDifference, \"s\");\n      this.setState({\n        durationMessage\n      });\n    };\n\n    this.getInitialData = () => {\n      this.getCurrentData();\n      window.setTimeout(() => {\n        this.setState({\n          initialHumidity: this.state.currentHumidity,\n          initialTemperature: this.state.currentTemperature\n        });\n      }, 1000);\n      this.setState({\n        timer: setInterval(() => this.checkCurrentData(), 3000)\n      });\n    };\n\n    this.checkCurrentData = () => {\n      console.log(\"checking data\");\n      this.getCurrentData();\n      window.setTimeout(() => {\n        if (this.state.currentTemperature > this.state.peakTemperature) this.setState({\n          peakTemperature: this.state.currentTemperature\n        });\n        if (this.state.currentHumidity > this.state.peakHumidity) this.setState({\n          peakHumidity: this.state.currentHumidity\n        });\n      }, 1000);\n    };\n\n    this.getCurrentData = () => {\n      axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/fantasticfarenheit').then(currentTemperatureReading => this.setState({\n        currentTemperature: currentTemperatureReading.data.last_value\n      }));\n      axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/huzzahhumidity').then(currentHumidityReading => this.setState({\n        currentHumidity: currentHumidityReading.data.last_value\n      }));\n    };\n\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      currentTemperature: null,\n      currentHumidity: null,\n      initialTemperature: null,\n      initialHumidity: null,\n      peakTemperature: 0,\n      peakHumidity: 0,\n      showerStartedAt: null,\n      durationMessage: '',\n      duration: null,\n      timer: null,\n      avgs: {\n        length: null,\n        maxT: null,\n        maxH: null,\n        incH: null,\n        incT: null\n      }\n    };\n  }\n\n  startShower() {\n    this.setState({\n      showerStartedAt: Date.now()\n    });\n    axios.post('https://shower-power.herokuapp.com/api/v1/showers', {}).then(res => {\n      this.setState({\n        currentShowerId: res.data._id\n      });\n    }).catch(err => console.log(err));\n    this.getInitialData();\n  }\n\n  render() {\n    console.log(this.state);\n    const data = {\n      length: this.state.durationMessage,\n      averageLength: 0,\n      //calc\n      diffFromAverage: 0,\n      //calc\n      startH: this.state.initialHumidity,\n      startT: this.state.initialTemperature,\n      peakH: this.state.peakHumidity,\n      peakT: this.state.peakTemperature,\n      avgPeakH: this.state.avgs.peakT,\n      avgPeakT: this.state.avgs.peakH,\n      diffH: this.state.peakHumidity - this.state.initialHumidity,\n      diffT: this.state.peakTemperature - this.startShower.initialTemperature,\n      avgDiffH: this.state.avgs.incH,\n      avgDiffT: this.state.avgs.incT\n    };\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"SHWR PWR!\"), React.createElement(\"div\", {\n      className: \"app-headline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"keep it short!\"), React.createElement(Button, {\n      type: !this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off',\n      onClick: this.toggleShower,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), this.state.duration ? React.createElement(Data, {\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Ellen\\Code\\shower-power\\src\\App.js"],"names":["React","Button","Data","axios","require","App","Component","constructor","toggleShower","console","log","state","showerIsOn","endShower","startShower","setState","duration","Date","now","showerStartedAt","calculateDuration","initialTemperature","initialHumidity","peakHumidity","peakTemperature","patch","currentShowerId","tempBefore","humidityBefore","tempPeak","humidityPeak","clearInterval","timer","getAllShowerData","get","then","res","calculateAverages","data","totalLength","reduce","acc","cur","totalMaxTemp","totalMaxHumidity","totalIncHumidity","totalIncTemp","averages","length","maxT","maxH","incT","incH","durationMessage","hoursDifference","Math","floor","minutesDifference","secondsDifference","getInitialData","getCurrentData","window","setTimeout","currentHumidity","currentTemperature","setInterval","checkCurrentData","currentTemperatureReading","last_value","currentHumidityReading","avgs","post","_id","catch","err","render","averageLength","diffFromAverage","startH","startT","peakH","peakT","avgPeakH","avgPeakT","diffH","diffT","avgDiffH","avgDiffT"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Button from './Button';\nimport Data from './Data';\nimport './App.css';\n\nconst axios = require('axios');\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      currentTemperature: null,\n      currentHumidity: null,\n      initialTemperature: null,\n      initialHumidity: null,\n      peakTemperature: 0,\n      peakHumidity: 0,\n      showerStartedAt: null,\n      durationMessage: '',\n      duration: null,\n      timer: null,\n      avgs: {\n        length: null,\n        maxT: null,\n        maxH: null,\n        incH: null,\n        incT: null\n      }\n    }\n  }\n\n  toggleShower = () => {\n    console.log(this.state.showerIsOn)\n    this.state.showerIsOn ? this.endShower() : this.startShower();\n    const showerIsOn = !this.state.showerIsOn\n    this.setState({showerIsOn});\n  }\n\n  startShower (){\n    this.setState({showerStartedAt: Date.now()})\n    axios.post('https://shower-power.herokuapp.com/api/v1/showers', {})\n      .then(res => {\n        this.setState({currentShowerId: res.data._id})\n      }).catch(err => console.log(err))\n    this.getInitialData();\n  }\n\n  endShower = () => {\n    const duration = Date.now() - this.state.showerStartedAt;\n    this.calculateDuration()\n    const {initialTemperature, initialHumidity, peakHumidity, peakTemperature} = this.state;\n    axios.patch(`https://shower-power.herokuapp.com/api/v1/showers/${this.state.currentShowerId}`, {duration, tempBefore: initialTemperature, humidityBefore: initialHumidity, tempPeak: peakTemperature, humidityPeak: peakHumidity})\n    clearInterval(this.state.timer)\n    this.getAllShowerData();\n  }\n\n  getAllShowerData = () => {\n    axios.get('https://shower-power.herokuapp.com/api/v1/showers/').then(res => {\n      this.calculateAverages(res.data)\n    })\n  }\n\n  calculateAverages = (data) => {\n    const totalLength = data.reduce((acc, cur) => acc + cur.duration);\n    const totalMaxTemp = data.reduce((acc, cur) => acc + cur.peakTemperature)\n    const totalMaxHumidity = data.reduce((acc, cur) => acc + cur.peakHumidity)\n    const totalIncHumidity = data.reduce((acc, cur) => acc + (cur.peakHumidity - cur.initialHumidity))\n    const totalIncTemp = data.reduce((acc, cur) => acc + (cur.peakTemperature - cur.initialTemperature))\n\n    const averages = {\n      length: totalLength / data.length,\n      maxT: totalMaxTemp / data.length,\n      maxH: totalMaxHumidity / data.length,\n      incT: totalIncTemp / data.length,\n      incH: totalIncHumidity / data.length\n    }\n    this.setState({averages})\n  }\n\n  calculateDuration = () => {\n      let duration = Date.now() - this.state.showerStartedAt;\n      this.setState({duration})\n      let durationMessage;\n        const hoursDifference = Math.floor(duration/1000/60/60);\n        duration -= hoursDifference*1000*60*60\n        const minutesDifference = Math.floor(duration/1000/60);\n        duration -= minutesDifference*1000*60\n        const secondsDifference = Math.floor(duration/1000);\n        durationMessage = `${minutesDifference}m ${secondsDifference}s`\n      this.setState({durationMessage})\n  }\n\n  getInitialData = () => {\n    this.getCurrentData();\n    window.setTimeout(() => {\n      this.setState({initialHumidity: this.state.currentHumidity, initialTemperature: this.state.currentTemperature})\n  }, 1000);\n    this.setState({timer: setInterval(() => this.checkCurrentData(), 3000)})\n  }\n\n  checkCurrentData = () => {\n    console.log(\"checking data\")\n    this.getCurrentData();\n    window.setTimeout(() => {\n      if (this.state.currentTemperature > this.state.peakTemperature) this.setState({peakTemperature: this.state.currentTemperature})\n      if (this.state.currentHumidity > this.state.peakHumidity) this.setState({peakHumidity: this.state.currentHumidity})\n      }, 1000);\n  }\n\n  getCurrentData = () => {\n    axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/fantasticfarenheit')\n      .then(currentTemperatureReading => this.setState({ currentTemperature: currentTemperatureReading.data.last_value }))\n    axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/huzzahhumidity')\n      .then(currentHumidityReading => this.setState({currentHumidity: currentHumidityReading.data.last_value}))\n  }\n\n  render() {\n    console.log(this.state);\n    const data = {\n      length: this.state.durationMessage,\n      averageLength: 0, //calc\n      diffFromAverage: 0, //calc\n      startH: this.state.initialHumidity,\n      startT: this.state.initialTemperature,\n      peakH: this.state.peakHumidity,\n      peakT: this.state.peakTemperature,\n      avgPeakH: this.state.avgs.peakT,\n      avgPeakT: this.state.avgs.peakH,\n      diffH: this.state.peakHumidity - this.state.initialHumidity,\n      diffT: this.state.peakTemperature - this.startShower.initialTemperature,\n      avgDiffH: this.state.avgs.incH,\n      avgDiffT: this.state.avgs.incT\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"app-title\">SHWR PWR!</div>\n        <div className=\"app-headline\">keep it short!</div>\n        <Button type={!this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off' } onClick={this.toggleShower}/>\n        {this.state.duration ? <Data data={data}/> : null}\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}