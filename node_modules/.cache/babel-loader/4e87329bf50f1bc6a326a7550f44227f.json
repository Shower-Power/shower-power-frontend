{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ellen\\\\Code\\\\shower-power\\\\src\\\\App.js\";\nimport React from 'react';\nimport Button from './Button';\nimport './App.css';\n\nconst axios = require('axios');\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.toggleShower = () => {\n      console.log(this.state.showerIsOn);\n      this.state.showerIsOn ? this.endShower() : this.startShower();\n      const showerIsOn = !this.state.showerIsOn;\n      this.setState({\n        showerIsOn\n      });\n    };\n\n    this.endShower = () => {\n      this.setState({\n        showerEndedAt: Date.now()\n      });\n      const duration = Date.now() - this.state.showerStartedAt;\n      axios.patch(\"https://shower-power.herokuapp.com/api/v1/showers/\".concat(this.state.currentShowerId), {\n        duration\n      });\n      this.calculateDuration();\n    };\n\n    this.calculateDuration = () => {\n      let duration = this.state.showerEndedAt - this.state.showerStartedAt;\n      let hoursDifference;\n      let minutesDifference;\n      let secondsDifference;\n      let durationMessage;\n\n      if (duration / 1000 < 60) {\n        const secondsDifference = Math.floor(duration / 1000);\n        durationMessage = \"\".concat(hoursDifference, \" hours \").concat(minutesDifference, \" minutes \").concat(secondsDifference, \" seconds\");\n      } else if (duration / 1000 / 60 < 60) {\n        const minutesDifference = Math.floor(duration / 1000 / 60);\n        duration -= minutesDifference * 1000 * 60;\n        const secondsDifference = Math.floor(duration / 1000);\n        durationMessage = \"\".concat(hoursDifference, \" hours \").concat(minutesDifference, \" minutes \").concat(secondsDifference, \" seconds\");\n      } else {\n        const hoursDifference = Math.floor(duration / 1000 / 60 / 60);\n        duration -= hoursDifference * 1000 * 60 * 60;\n        const minutesDifference = Math.floor(duration / 1000 / 60);\n        duration -= minutesDifference * 1000 * 60;\n        const secondsDifference = Math.floor(duration / 1000);\n        durationMessage = \"\".concat(hoursDifference, \" hours \").concat(minutesDifference, \" minutes \").concat(secondsDifference, \" seconds\");\n      }\n\n      this.setState({\n        durationMessage\n      });\n    };\n\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      showerStartedAt: null,\n      showerEndedAt: null,\n      durationMessage: ''\n    };\n  }\n\n  startShower() {\n    this.setState({\n      showerStartedAt: Date.now()\n    });\n    axios.post('https://shower-power.herokuapp.com/api/v1/showers', {}).then(res => {\n      this.setState({\n        currentShowerId: res.data._id\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: !this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off',\n      onClick: this.toggleShower,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Ellen\\Code\\shower-power\\src\\App.js"],"names":["React","Button","axios","require","App","Component","constructor","toggleShower","console","log","state","showerIsOn","endShower","startShower","setState","showerEndedAt","Date","now","duration","showerStartedAt","patch","currentShowerId","calculateDuration","hoursDifference","minutesDifference","secondsDifference","durationMessage","Math","floor","post","then","res","data","_id","catch","err","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Button from './Button';\nimport './App.css';\n\nconst axios = require('axios');\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      showerStartedAt: null,\n      showerEndedAt: null,\n      durationMessage: '',\n    }\n  }\n\n  toggleShower = () => {\n    console.log(this.state.showerIsOn)\n    this.state.showerIsOn ? this.endShower() : this.startShower();\n    const showerIsOn = !this.state.showerIsOn\n    this.setState({showerIsOn});\n  }\n\n  startShower (){\n    this.setState({showerStartedAt: Date.now()})\n    axios.post('https://shower-power.herokuapp.com/api/v1/showers', {})\n      .then(res => {\n        this.setState({currentShowerId: res.data._id})\n      }).catch(err => console.log(err))\n  }\n\n  endShower = () => {\n    this.setState({showerEndedAt: Date.now()})\n    const duration = Date.now() - this.state.showerStartedAt;\n    axios.patch(`https://shower-power.herokuapp.com/api/v1/showers/${this.state.currentShowerId}`, {duration})\n    this.calculateDuration()\n  }\n\n  calculateDuration = () => {\n      let duration = this.state.showerEndedAt - this.state.showerStartedAt;\n      let hoursDifference;\n      let minutesDifference;\n      let secondsDifference;\n      let durationMessage;\n\n      if (duration/1000 < 60){\n        const secondsDifference = Math.floor(duration/1000);\n        durationMessage = `${hoursDifference} hours ${minutesDifference} minutes ${secondsDifference} seconds`\n      } else if (duration/1000/60 < 60) {\n        const minutesDifference = Math.floor(duration/1000/60);\n        duration -= minutesDifference*1000*60\n        const secondsDifference = Math.floor(duration/1000);\n        durationMessage = `${hoursDifference} hours ${minutesDifference} minutes ${secondsDifference} seconds`\n      } else {\n        const hoursDifference = Math.floor(duration/1000/60/60);\n        duration -= hoursDifference*1000*60*60\n        const minutesDifference = Math.floor(duration/1000/60);\n        duration -= minutesDifference*1000*60\n        const secondsDifference = Math.floor(duration/1000);\n        durationMessage = `${hoursDifference} hours ${minutesDifference} minutes ${secondsDifference} seconds`}\n      this.setState({durationMessage})\n  }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"App\">\n        <Button type={!this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off' } onClick={this.toggleShower}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}