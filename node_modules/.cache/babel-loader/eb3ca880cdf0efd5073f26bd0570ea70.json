{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ellen\\\\Code\\\\shower-power\\\\src\\\\App.js\";\nimport React from 'react';\nimport Button from './Button';\nimport './App.css';\n\nconst axios = require('axios');\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.toggleShower = () => {\n      console.log(this.state.showerIsOn);\n      this.state.showerIsOn ? this.endShower() : this.startShower();\n      const showerIsOn = !this.state.showerIsOn;\n      this.setState({\n        showerIsOn\n      });\n    };\n\n    this.endShower = () => {\n      const duration = Date.now() - this.state.showerStartedAt;\n      axios.patch(\"https://shower-power.herokuapp.com/api/v1/showers/\".concat(this.state.currentShowerId), {\n        duration\n      });\n      this.calculateDuration();\n    };\n\n    this.calculateDuration = () => {\n      let duration = Date.now() - this.state.showerStartedAt;\n      this.setState({\n        duration\n      });\n      let durationMessage;\n      const hoursDifference = Math.floor(duration / 1000 / 60 / 60);\n      duration -= hoursDifference * 1000 * 60 * 60;\n      const minutesDifference = Math.floor(duration / 1000 / 60);\n      duration -= minutesDifference * 1000 * 60;\n      const secondsDifference = Math.floor(duration / 1000);\n      durationMessage = \"\".concat(hoursDifference, \" hours \").concat(minutesDifference, \" minutes \").concat(secondsDifference, \" seconds\");\n      this.setState({\n        durationMessage\n      });\n    };\n\n    this.getInitialData = () => {\n      this.getCurrentData();\n      window.setTimeout(console.log(\"timeout!\"), 1000);\n    };\n\n    this.checkCurrentData = () => {\n      this.getCurrentData();\n      window.setTimeout(() => {\n        if (this.state.currentTemperature > this.state.peakTemperature) this.setState({\n          peakTemperature: this.state.currentTemperature\n        });\n        if (this.state.currentHumidity > this.state.peakHumidity) this.setState({\n          peakHumidity: this.state.currentHumidity\n        });\n        if (this.state.showerIsOn) window.setTimeout(this.checkCurrentData, 10000);\n      }, 1000);\n    };\n\n    this.getCurrentData = () => {\n      let temperature;\n      let humidity;\n      axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/fantasticfarenheit').then(currentTemperatureReading => this.setState({\n        currentTemperature: currentTemperatureReading.data.last_value\n      }));\n      axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/huzzahhumidity').then(currentHumidityReading => this.setState({\n        currentHumidity: currentHumidityReading.data.last_value\n      }));\n      return {\n        temperature,\n        humidity\n      };\n    };\n\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      currentTemperature: null,\n      currentHumidity: null,\n      initialTemperature: null,\n      initialHumidity: null,\n      peakTemperature: null,\n      peakHumidity: null,\n      showerStartedAt: null,\n      showerEndedAt: null,\n      durationMessage: '',\n      duration: null\n    };\n  }\n\n  startShower() {\n    this.setState({\n      showerStartedAt: Date.now()\n    });\n    this.getInitialData();\n    axios.post('https://shower-power.herokuapp.com/api/v1/showers', {}).then(res => {\n      this.setState({\n        currentShowerId: res.data._id\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: !this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off',\n      onClick: this.toggleShower,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Ellen\\Code\\shower-power\\src\\App.js"],"names":["React","Button","axios","require","App","Component","constructor","toggleShower","console","log","state","showerIsOn","endShower","startShower","setState","duration","Date","now","showerStartedAt","patch","currentShowerId","calculateDuration","durationMessage","hoursDifference","Math","floor","minutesDifference","secondsDifference","getInitialData","getCurrentData","window","setTimeout","checkCurrentData","currentTemperature","peakTemperature","currentHumidity","peakHumidity","temperature","humidity","get","then","currentTemperatureReading","data","last_value","currentHumidityReading","initialTemperature","initialHumidity","showerEndedAt","post","res","_id","catch","err","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Button from './Button';\nimport './App.css';\n\nconst axios = require('axios');\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      currentTemperature: null,\n      currentHumidity: null,\n      initialTemperature: null,\n      initialHumidity: null,\n      peakTemperature: null,\n      peakHumidity: null,\n      showerStartedAt: null,\n      showerEndedAt: null,\n      durationMessage: '',\n      duration: null\n    }\n  }\n\n  toggleShower = () => {\n    console.log(this.state.showerIsOn)\n    this.state.showerIsOn ? this.endShower() : this.startShower();\n    const showerIsOn = !this.state.showerIsOn\n    this.setState({showerIsOn});\n  }\n\n  startShower (){\n    this.setState({showerStartedAt: Date.now()})\n    this.getInitialData();\n    axios.post('https://shower-power.herokuapp.com/api/v1/showers', {})\n      .then(res => {\n        this.setState({currentShowerId: res.data._id})\n      }).catch(err => console.log(err))\n  }\n\n  endShower = () => {\n    const duration = Date.now() - this.state.showerStartedAt;\n    axios.patch(`https://shower-power.herokuapp.com/api/v1/showers/${this.state.currentShowerId}`, {duration})\n    this.calculateDuration()\n  }\n\n  calculateDuration = () => {\n      let duration = Date.now() - this.state.showerStartedAt;\n      this.setState({duration})\n      let durationMessage;\n        const hoursDifference = Math.floor(duration/1000/60/60);\n        duration -= hoursDifference*1000*60*60\n        const minutesDifference = Math.floor(duration/1000/60);\n        duration -= minutesDifference*1000*60\n        const secondsDifference = Math.floor(duration/1000);\n        durationMessage = `${hoursDifference} hours ${minutesDifference} minutes ${secondsDifference} seconds`\n      this.setState({durationMessage})\n  }\n\n  getInitialData = () => {\n    this.getCurrentData();\n    window.setTimeout(console.log(\"timeout!\"), 1000);\n  }\n\n  checkCurrentData = () => {\n    this.getCurrentData();\n    window.setTimeout(() => {\n    if (this.state.currentTemperature > this.state.peakTemperature) this.setState({peakTemperature: this.state.currentTemperature})\n    if (this.state.currentHumidity > this.state.peakHumidity) this.setState({peakHumidity: this.state.currentHumidity})\n    if (this.state.showerIsOn) window.setTimeout(this.checkCurrentData, 10000)\n    }, 1000);\n  }\n\n  getCurrentData = () => {\n    let temperature;\n    let humidity;\n    axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/fantasticfarenheit')\n      .then(currentTemperatureReading => this.setState({ currentTemperature: currentTemperatureReading.data.last_value }))\n    axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/huzzahhumidity')\n      .then(currentHumidityReading => this.setState({currentHumidity: currentHumidityReading.data.last_value}))\n    return({temperature, humidity})\n  }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"App\">\n        <Button type={!this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off' } onClick={this.toggleShower}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}