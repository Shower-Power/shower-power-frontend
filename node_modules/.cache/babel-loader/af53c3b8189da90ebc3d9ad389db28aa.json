{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ellen\\\\Code\\\\shower-power\\\\src\\\\App.js\";\nimport React from 'react';\nimport Button from './Button';\nimport './App.css';\n\nconst axios = require('axios');\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.toggleShower = () => {\n      console.log(this.state.showerIsOn);\n      this.state.showerIsOn ? this.endShower() : this.startShower();\n      const showerIsOn = !this.state.showerIsOn;\n      this.setState({\n        showerIsOn\n      });\n    };\n\n    this.endShower = () => {\n      const duration = Date.now() - this.state.showerStartedAt;\n      axios.patch(\"https://shower-power.herokuapp.com/api/v1/showers/\".concat(this.state.currentShowerId), {\n        duration\n      });\n      this.calculateDuration();\n    };\n\n    this.calculateDuration = () => {\n      let duration = Date.now() - this.state.showerStartedAt;\n      this.setState({\n        duration\n      });\n      let durationMessage;\n      const hoursDifference = Math.floor(duration / 1000 / 60 / 60);\n      duration -= hoursDifference * 1000 * 60 * 60;\n      const minutesDifference = Math.floor(duration / 1000 / 60);\n      duration -= minutesDifference * 1000 * 60;\n      const secondsDifference = Math.floor(duration / 1000);\n      durationMessage = \"\".concat(hoursDifference, \" hours \").concat(minutesDifference, \" minutes \").concat(secondsDifference, \" seconds\");\n      this.setState({\n        durationMessage\n      });\n    };\n\n    this.getInitialData = () => {\n      const currentData = this.getCurrentData(); // this.setState({initialTemperature: currentData.temperature, initialHumidity: currentData.humidity})\n\n      console.log(currentData);\n      this.setState({\n        initialHumidity: currentData.humidity\n      });\n    };\n\n    this.checkCurrentData = () => {\n      const currentData = this.getCurrentData();\n      if (currentData.temperature > this.state.peakTemperature) this.setState({\n        peakTemperature: currentData.temperature\n      });\n      if (currentData.humidity > this.state.peakHumidity) this.setState({\n        peakHumidity: currentData.humidity\n      });\n    };\n\n    this.getCurrentData = () => {\n      let temperature;\n      let humidity;\n      axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/fantasticfarenheit').then(currentTemperatureReading => {\n        temperature = currentTemperatureReading.data.last_value;\n      }).then(axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/huzzahhumidity').then(currentHumidityReading => {\n        humidity = currentHumidityReading.data.last_value;\n      })).catch(err => console.log(err));\n      console.log(temperature, humidity);\n      return {\n        temperature,\n        humidity\n      };\n    };\n\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      initialTemperature: null,\n      initialHumidity: null,\n      peakTemperature: null,\n      peakHumidity: null,\n      showerStartedAt: null,\n      showerEndedAt: null,\n      durationMessage: '',\n      duration: null\n    };\n  }\n\n  startShower() {\n    this.setState({\n      showerStartedAt: Date.now()\n    });\n    this.getInitialData();\n    axios.post('https://shower-power.herokuapp.com/api/v1/showers', {}).then(res => {\n      this.setState({\n        currentShowerId: res.data._id\n      });\n    }).catch(err => console.log(err));\n  }\n\n  // getCurrentTemperature = () => {\n  //   axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/fantasticfarenheit').then(currentTemperatureReading => {\n  //     console.log(currentTemperatureReading.data.last_value)\n  //     return currentTemperatureReading.data.last_value});\n  // }\n  // getCurrentHumidity = () => {\n  //   axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/huzzahhumidity').then(currentHumidityReading => {\n  //     console.log(currentHumidityReading.data.last_value)\n  //     return currentHumidityReading.data.last_value});\n  // }\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: !this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off',\n      onClick: this.toggleShower,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Ellen\\Code\\shower-power\\src\\App.js"],"names":["React","Button","axios","require","App","Component","constructor","toggleShower","console","log","state","showerIsOn","endShower","startShower","setState","duration","Date","now","showerStartedAt","patch","currentShowerId","calculateDuration","durationMessage","hoursDifference","Math","floor","minutesDifference","secondsDifference","getInitialData","currentData","getCurrentData","initialHumidity","humidity","checkCurrentData","temperature","peakTemperature","peakHumidity","get","then","currentTemperatureReading","data","last_value","currentHumidityReading","catch","err","initialTemperature","showerEndedAt","post","res","_id","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Button from './Button';\nimport './App.css';\n\nconst axios = require('axios');\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      initialTemperature: null,\n      initialHumidity: null,\n      peakTemperature: null,\n      peakHumidity: null,\n      showerStartedAt: null,\n      showerEndedAt: null,\n      durationMessage: '',\n      duration: null\n    }\n  }\n\n  toggleShower = () => {\n    console.log(this.state.showerIsOn)\n    this.state.showerIsOn ? this.endShower() : this.startShower();\n    const showerIsOn = !this.state.showerIsOn\n    this.setState({showerIsOn});\n  }\n\n  startShower (){\n    this.setState({showerStartedAt: Date.now()})\n    this.getInitialData();\n    axios.post('https://shower-power.herokuapp.com/api/v1/showers', {})\n      .then(res => {\n        this.setState({currentShowerId: res.data._id})\n      }).catch(err => console.log(err))\n  }\n\n  endShower = () => {\n    const duration = Date.now() - this.state.showerStartedAt;\n    axios.patch(`https://shower-power.herokuapp.com/api/v1/showers/${this.state.currentShowerId}`, {duration})\n    this.calculateDuration()\n  }\n\n  calculateDuration = () => {\n      let duration = Date.now() - this.state.showerStartedAt;\n      this.setState({duration})\n      let durationMessage;\n        const hoursDifference = Math.floor(duration/1000/60/60);\n        duration -= hoursDifference*1000*60*60\n        const minutesDifference = Math.floor(duration/1000/60);\n        duration -= minutesDifference*1000*60\n        const secondsDifference = Math.floor(duration/1000);\n        durationMessage = `${hoursDifference} hours ${minutesDifference} minutes ${secondsDifference} seconds`\n      this.setState({durationMessage})\n  }\n\n  getInitialData = () => {\n    const currentData = this.getCurrentData();\n    // this.setState({initialTemperature: currentData.temperature, initialHumidity: currentData.humidity})\n    console.log(currentData)\n    this.setState({initialHumidity: currentData.humidity})\n  }\n\n  checkCurrentData = () => {\n    const currentData = this.getCurrentData();\n    if (currentData.temperature > this.state.peakTemperature) this.setState({peakTemperature: currentData.temperature})\n    if (currentData.humidity > this.state.peakHumidity) this.setState({peakHumidity: currentData.humidity})\n  }\n\n  getCurrentData = () => {\n    let temperature;\n    let humidity;\n      axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/fantasticfarenheit')\n      .then(currentTemperatureReading => { temperature = currentTemperatureReading.data.last_value })\n      .then(axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/huzzahhumidity')\n      .then(currentHumidityReading => { humidity = currentHumidityReading.data.last_value}))\n      .catch(err => console.log(err));\n      console.log(temperature, humidity)\n    return({temperature, humidity})\n  }\n\n  // getCurrentTemperature = () => {\n  //   axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/fantasticfarenheit').then(currentTemperatureReading => {\n  //     console.log(currentTemperatureReading.data.last_value)\n  //     return currentTemperatureReading.data.last_value});\n  // }\n\n  // getCurrentHumidity = () => {\n  //   axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/huzzahhumidity').then(currentHumidityReading => {\n  //     console.log(currentHumidityReading.data.last_value)\n  //     return currentHumidityReading.data.last_value});\n  // }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"App\">\n        <Button type={!this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off' } onClick={this.toggleShower}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}