{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ellen\\\\Code\\\\shower-power\\\\src\\\\App.js\";\nimport React from 'react';\nimport Button from './Button';\nimport Data from './Data';\nimport './App.css';\n\nconst axios = require('axios');\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.toggleShower = () => {\n      console.log(this.state.showerIsOn);\n      this.state.showerIsOn ? this.endShower() : this.startShower();\n      const showerIsOn = !this.state.showerIsOn;\n      this.setState({\n        showerIsOn\n      });\n    };\n\n    this.endShower = () => {\n      const duration = Date.now() - this.state.showerStartedAt;\n      this.calculateDuration();\n      const _this$state = this.state,\n            initialTemperature = _this$state.initialTemperature,\n            initialHumidity = _this$state.initialHumidity,\n            peakHumidity = _this$state.peakHumidity,\n            peakTemperature = _this$state.peakTemperature;\n      axios.patch(\"https://shower-power.herokuapp.com/api/v1/showers/\".concat(this.state.currentShowerId), {\n        duration,\n        tempBefore: initialTemperature,\n        humidityBefore: initialHumidity,\n        tempPeak: peakTemperature,\n        humidityPeak: peakHumidity\n      });\n      clearInterval(this.state.timer);\n      this.getAllShowerData();\n      window.setTimeout(() => this.calculateAverages(), 1000);\n    };\n\n    this.getAllShowerData = () => {\n      axios.get('https://shower-power.herokuapp.com/api/v1/showers/').then(res => {\n        console.log(res.data);\n      });\n    };\n\n    this.calculateAverages = data => {};\n\n    this.calculateDuration = () => {\n      let duration = Date.now() - this.state.showerStartedAt;\n      this.setState({\n        duration\n      });\n      let durationMessage;\n      const hoursDifference = Math.floor(duration / 1000 / 60 / 60);\n      duration -= hoursDifference * 1000 * 60 * 60;\n      const minutesDifference = Math.floor(duration / 1000 / 60);\n      duration -= minutesDifference * 1000 * 60;\n      const secondsDifference = Math.floor(duration / 1000);\n      durationMessage = \"\".concat(minutesDifference, \"m \").concat(secondsDifference, \"s\");\n      this.setState({\n        durationMessage\n      });\n    };\n\n    this.getInitialData = () => {\n      this.getCurrentData();\n      window.setTimeout(() => {\n        this.setState({\n          initialHumidity: this.state.currentHumidity,\n          initialTemperature: this.state.currentTemperature\n        });\n      }, 1000);\n      this.setState({\n        timer: setInterval(() => this.checkCurrentData(), 3000)\n      });\n    };\n\n    this.checkCurrentData = () => {\n      console.log(\"checking data\");\n      this.getCurrentData();\n      window.setTimeout(() => {\n        if (this.state.currentTemperature > this.state.peakTemperature) this.setState({\n          peakTemperature: this.state.currentTemperature\n        });\n        if (this.state.currentHumidity > this.state.peakHumidity) this.setState({\n          peakHumidity: this.state.currentHumidity\n        });\n      }, 1000);\n    };\n\n    this.getCurrentData = () => {\n      axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/fantasticfarenheit').then(currentTemperatureReading => this.setState({\n        currentTemperature: currentTemperatureReading.data.last_value\n      }));\n      axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/huzzahhumidity').then(currentHumidityReading => this.setState({\n        currentHumidity: currentHumidityReading.data.last_value\n      }));\n    };\n\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      currentTemperature: null,\n      currentHumidity: null,\n      initialTemperature: null,\n      initialHumidity: null,\n      peakTemperature: 0,\n      peakHumidity: 0,\n      showerStartedAt: null,\n      durationMessage: '',\n      duration: null,\n      timer: null\n    };\n  }\n\n  startShower() {\n    this.setState({\n      showerStartedAt: Date.now()\n    });\n    axios.post('https://shower-power.herokuapp.com/api/v1/showers', {}).then(res => {\n      this.setState({\n        currentShowerId: res.data._id\n      });\n    }).catch(err => console.log(err));\n    this.getInitialData();\n  }\n\n  render() {\n    console.log(this.state);\n    const data = {\n      length: this.state.durationMessage,\n      averageLength: 0,\n      //calc\n      diffFromAverage: 0,\n      //calc\n      startH: this.state.initialHumidity,\n      startT: this.state.initialTemperature,\n      peakH: this.state.peakHumidity,\n      peakT: this.state.peakTemperature,\n      avgPeakH: 0,\n      //calc\n      avgPeakT: 0,\n      //calc\n      diffH: this.state.peakHumidity - this.state.initialHumidity,\n      diffT: this.state.peakTemperature - this.startShower.initialTemperature,\n      avgDiffH: 0,\n      //calc\n      avgDiffT: 0 // calc\n\n    };\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: !this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off',\n      onClick: this.toggleShower,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), this.state.duration ? React.createElement(Data, {\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Ellen\\Code\\shower-power\\src\\App.js"],"names":["React","Button","Data","axios","require","App","Component","constructor","toggleShower","console","log","state","showerIsOn","endShower","startShower","setState","duration","Date","now","showerStartedAt","calculateDuration","initialTemperature","initialHumidity","peakHumidity","peakTemperature","patch","currentShowerId","tempBefore","humidityBefore","tempPeak","humidityPeak","clearInterval","timer","getAllShowerData","window","setTimeout","calculateAverages","get","then","res","data","durationMessage","hoursDifference","Math","floor","minutesDifference","secondsDifference","getInitialData","getCurrentData","currentHumidity","currentTemperature","setInterval","checkCurrentData","currentTemperatureReading","last_value","currentHumidityReading","post","_id","catch","err","render","length","averageLength","diffFromAverage","startH","startT","peakH","peakT","avgPeakH","avgPeakT","diffH","diffT","avgDiffH","avgDiffT"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Button from './Button';\nimport Data from './Data';\nimport './App.css';\n\nconst axios = require('axios');\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      currentTemperature: null,\n      currentHumidity: null,\n      initialTemperature: null,\n      initialHumidity: null,\n      peakTemperature: 0,\n      peakHumidity: 0,\n      showerStartedAt: null,\n      durationMessage: '',\n      duration: null,\n      timer: null\n    }\n  }\n\n  toggleShower = () => {\n    console.log(this.state.showerIsOn)\n    this.state.showerIsOn ? this.endShower() : this.startShower();\n    const showerIsOn = !this.state.showerIsOn\n    this.setState({showerIsOn});\n  }\n\n  startShower (){\n    this.setState({showerStartedAt: Date.now()})\n    axios.post('https://shower-power.herokuapp.com/api/v1/showers', {})\n      .then(res => {\n        this.setState({currentShowerId: res.data._id})\n      }).catch(err => console.log(err))\n    this.getInitialData();\n  }\n\n  endShower = () => {\n    const duration = Date.now() - this.state.showerStartedAt;\n    this.calculateDuration()\n    const {initialTemperature, initialHumidity, peakHumidity, peakTemperature} = this.state;\n    axios.patch(`https://shower-power.herokuapp.com/api/v1/showers/${this.state.currentShowerId}`, {duration, tempBefore: initialTemperature, humidityBefore: initialHumidity, tempPeak: peakTemperature, humidityPeak: peakHumidity})\n    clearInterval(this.state.timer)\n    this.getAllShowerData();\n    window.setTimeout(() => this.calculateAverages(), 1000)\n  }\n\n  getAllShowerData = () => {\n    axios.get('https://shower-power.herokuapp.com/api/v1/showers/').then(res => {\n      console.log(res.data)\n    })\n  }\n\n  calculateAverages = (data) => {\n\n  }\n\n  calculateDuration = () => {\n      let duration = Date.now() - this.state.showerStartedAt;\n      this.setState({duration})\n      let durationMessage;\n        const hoursDifference = Math.floor(duration/1000/60/60);\n        duration -= hoursDifference*1000*60*60\n        const minutesDifference = Math.floor(duration/1000/60);\n        duration -= minutesDifference*1000*60\n        const secondsDifference = Math.floor(duration/1000);\n        durationMessage = `${minutesDifference}m ${secondsDifference}s`\n      this.setState({durationMessage})\n  }\n\n  getInitialData = () => {\n    this.getCurrentData();\n    window.setTimeout(() => {\n      this.setState({initialHumidity: this.state.currentHumidity, initialTemperature: this.state.currentTemperature})\n  }, 1000);\n    this.setState({timer: setInterval(() => this.checkCurrentData(), 3000)})\n  }\n\n  checkCurrentData = () => {\n    console.log(\"checking data\")\n    this.getCurrentData();\n    window.setTimeout(() => {\n      if (this.state.currentTemperature > this.state.peakTemperature) this.setState({peakTemperature: this.state.currentTemperature})\n      if (this.state.currentHumidity > this.state.peakHumidity) this.setState({peakHumidity: this.state.currentHumidity})\n      }, 1000);\n  }\n\n  getCurrentData = () => {\n    axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/fantasticfarenheit')\n      .then(currentTemperatureReading => this.setState({ currentTemperature: currentTemperatureReading.data.last_value }))\n    axios.get('https://io.adafruit.com/api/v2/valefleur/feeds/huzzahhumidity')\n      .then(currentHumidityReading => this.setState({currentHumidity: currentHumidityReading.data.last_value}))\n  }\n\n  render() {\n    console.log(this.state);\n    const data = {\n      length: this.state.durationMessage,\n      averageLength: 0, //calc\n      diffFromAverage: 0, //calc\n      startH: this.state.initialHumidity,\n      startT: this.state.initialTemperature,\n      peakH: this.state.peakHumidity,\n      peakT: this.state.peakTemperature,\n      avgPeakH: 0, //calc\n      avgPeakT: 0, //calc\n      diffH: this.state.peakHumidity - this.state.initialHumidity,\n      diffT: this.state.peakTemperature - this.startShower.initialTemperature,\n      avgDiffH: 0, //calc\n      avgDiffT: 0 // calc\n    }\n    return (\n      <div className=\"App\">\n        <Button type={!this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off' } onClick={this.toggleShower}/>\n        {this.state.duration ? <Data data={data}/> : null}\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}