{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ellen\\\\Code\\\\shower-power\\\\src\\\\App.js\";\nimport React from 'react';\nimport Button from './Button';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.toggleShower = () => {\n      this.state.showerIsOn ? this.startShower() : this.endShower();\n      this.setState({\n        showerIsOn: !this.state.showerIsOn\n      });\n    };\n\n    this.startShower = () => {\n      // set this.state.showerStartedAt to the current timestamp\n      this.setState({\n        showerStartedAt: Date.now()\n      });\n      const x = fetch('https://shower-power.herokuapp.com/api/v1/showers', {\n        method: 'POST',\n        body: {},\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        // this.setState({currentShowerId: res.body._id})\n        // console.log(res.json())\n        return res.body;\n      }).catch(err => console.log(err));\n      console.log(x);\n    };\n\n    this.endShower = () => {\n      // calculate a duration and add to the record\n      this.setState({\n        showerEndedAt: Date.now()\n      });\n      const duration = Date.now() - this.state.showerStartedAt;\n      fetch(\"https://shower-power.herokuapp.com/api/v1/showers/\".concat(this.state.currentShowerId), {\n        method: 'PATCH',\n        body: JSON.stringify({\n          duration\n        })\n      });\n    };\n\n    this.calculateDuration = () => {\n      let duration = this.state.showerEndedAt - this.state.showerStartedAt;\n      const hoursDifference = Math.floor(duration / 1000 / 60 / 60);\n      duration -= hoursDifference * 1000 * 60 * 60;\n      const minutesDifference = Math.floor(duration / 1000 / 60);\n      duration -= minutesDifference * 1000 * 60;\n      const secondsDifference = Math.floor(duration / 1000);\n      this.setState({\n        durationMessage: \"\".concat(hoursDifference, \" hours \").concat(minutesDifference, \" minutes \").concat(secondsDifference, \" seconds\")\n      });\n    };\n\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      showerStartedAt: null,\n      showerEndedAt: null,\n      durationMessage: ''\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off',\n      onClick: this.toggleShower,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Ellen\\Code\\shower-power\\src\\App.js"],"names":["React","Button","App","Component","constructor","toggleShower","state","showerIsOn","startShower","endShower","setState","showerStartedAt","Date","now","x","fetch","method","body","headers","then","res","catch","err","console","log","showerEndedAt","duration","currentShowerId","JSON","stringify","calculateDuration","hoursDifference","Math","floor","minutesDifference","secondsDifference","durationMessage","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from './Button';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      showerStartedAt: null,\n      showerEndedAt: null,\n      durationMessage: '',\n    }\n  }\n  toggleShower = () => {\n    this.state.showerIsOn ? this.startShower() : this.endShower();\n    this.setState({showerIsOn: !this.state.showerIsOn});\n  }\n\n  startShower = () => {\n    // set this.state.showerStartedAt to the current timestamp\n    this.setState({showerStartedAt: Date.now()})\n    const x = fetch('https://shower-power.herokuapp.com/api/v1/showers',{\n      method: 'POST',\n      body: {},\n      headers: {\"Content-Type\": \"application/json\"}\n    })\n    .then(res => {\n      // this.setState({currentShowerId: res.body._id})\n      // console.log(res.json())\n      return res.body;\n    }).catch(err => console.log(err))\n    console.log(x)\n  }\n\n  endShower = () => {\n    // calculate a duration and add to the record\n    this.setState({showerEndedAt: Date.now()})\n    const duration = Date.now() - this.state.showerStartedAt;\n    fetch(`https://shower-power.herokuapp.com/api/v1/showers/${this.state.currentShowerId}`, {\n      method: 'PATCH',\n      body: JSON.stringify({duration})\n    })\n  }\n\n  calculateDuration = () => {\n      let duration = this.state.showerEndedAt - this.state.showerStartedAt;\n     const hoursDifference = Math.floor(duration/1000/60/60);\n      duration -= hoursDifference*1000*60*60\n      const minutesDifference = Math.floor(duration/1000/60);\n      duration -= minutesDifference*1000*60\n      const secondsDifference = Math.floor(duration/1000);\n      this.setState({durationMessage: `${hoursDifference} hours ${minutesDifference} minutes ${secondsDifference} seconds`})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Button type={this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off' } onClick={this.toggleShower}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}