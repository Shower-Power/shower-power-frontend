{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ellen\\\\Code\\\\shower-power\\\\src\\\\App.js\";\nimport React from 'react';\nimport Button from './Button';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.toggleShower = () => {\n      !showerIsOn ? this.startShower() : this.endShower();\n      this.setState({\n        showerIsOn: !this.state.showerIsOn\n      });\n    };\n\n    this.startShower = () => {\n      // set this.state.showerStartedAt to the current timestamp\n      this.setState({\n        showerStartedAt: Date.now()\n      });\n      fetch('https://shower-power.herokuapp.com/api/v1/showers', {\n        method: 'POST',\n        body: JSON.stringify({}),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        // store the new shower ID in the state\n        console.log(response.json());\n      }).catch(err => console.log(err));\n    };\n\n    this.endShower = () => {\n      // calculate a duration and add to the record\n      this.setState({\n        showerEndedAt: Date.now()\n      });\n      const duration = fetch(\"https://shower-power.herokuapp.com/api/v1/showers/\".concat(id), {\n        method: 'PATCH',\n        body: JSON.stringify({\n          duration\n        })\n      });\n    };\n\n    this.calculateDuration = () => {\n      let duration = this.state.showerEndedAt.getTime() - this.state.showerStartedAt.getTime();\n      const hoursDifference = Math.floor(duration / 1000 / 60 / 60);\n      difference -= hoursDifference * 1000 * 60 * 60;\n      const minutesDifference = Math.floor(duration / 1000 / 60);\n      difference -= minutesDifference * 1000 * 60;\n      const secondsDifference = Math.floor(duration / 1000);\n      this.setState({\n        durationMessage: \"\".concat(hoursDifference, \" hours \").concat(minutesDifference, \" minutes \").concat(secondsDifference, \" seconds\")\n      });\n    };\n\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      showerStartedAt: null,\n      showerEndedAt: null,\n      durationMessage: ''\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off',\n      onClick: this.toggleShower,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Ellen\\Code\\shower-power\\src\\App.js"],"names":["React","Button","App","Component","constructor","toggleShower","showerIsOn","startShower","endShower","setState","state","showerStartedAt","Date","now","fetch","method","body","JSON","stringify","headers","then","response","console","log","json","catch","err","showerEndedAt","duration","id","calculateDuration","getTime","hoursDifference","Math","floor","difference","minutesDifference","secondsDifference","durationMessage","currentShowerId","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from './Button';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      showerIsOn: false,\n      currentShowerId: null,\n      showerStartedAt: null,\n      showerEndedAt: null,\n      durationMessage: '',\n    }\n  }\n  toggleShower = () => {\n    !showerIsOn ? this.startShower() : this.endShower();\n    this.setState({showerIsOn: !this.state.showerIsOn});\n  }\n\n  startShower = () => {\n    // set this.state.showerStartedAt to the current timestamp\n    this.setState({showerStartedAt: Date.now()})\n    fetch('https://shower-power.herokuapp.com/api/v1/showers',{\n      method: 'POST',\n      body: JSON.stringify({}),\n      headers: {\"Content-Type\": \"application/json\"}\n    })\n    .then(function(response){\n      // store the new shower ID in the state\n      console.log(response.json())\n    }).catch(err => console.log(err))\n  }\n\n  endShower = () => {\n    // calculate a duration and add to the record\n    this.setState({showerEndedAt: Date.now()})\n    const duration = \n    fetch(`https://shower-power.herokuapp.com/api/v1/showers/${id}`, {\n      method: 'PATCH',\n      body: JSON.stringify({duration})\n    })\n  }\n\n  calculateDuration = () => {\n    let duration = this.state.showerEndedAt.getTime() - this.state.showerStartedAt.getTime();\n     const hoursDifference = Math.floor(duration/1000/60/60);\n      difference -= hoursDifference*1000*60*60\n      const minutesDifference = Math.floor(duration/1000/60);\n      difference -= minutesDifference*1000*60\n      const secondsDifference = Math.floor(duration/1000);\n      this.setState({durationMessage: `${hoursDifference} hours ${minutesDifference} minutes ${secondsDifference} seconds`})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Button type={this.state.showerIsOn ? 'turn-shower-on' : 'turn-shower-off' } onClick={this.toggleShower}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}